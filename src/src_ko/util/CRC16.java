package src_ko.util;

/**
 *
 * CRC16 에러체크 모듈
 */
public class CRC16
{

////////////////////////////////////////////////////////////////////////////////////////
//	CCIYY 방식의 CRC16 계산식 - 통신 등에 적용됨
////////////////////////////////////////////////////////////////////////////////////////

/*
 << CRC Generation Function >>
.modicon protocol (RTU mode)
. Addr+func+Data Count+Data+Data+...+CRC Lo+CRC Hi
. Addr+func+Data Count+Data+Data+... --> CRC Lo+CRC Hi
*/
	/** CRC 다항식 */
	public static short CRC16   = (short) 0xa001 ;




	static byte tab_H[] = { (byte)
	0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)
	0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)
	0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)
	0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)
	0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)
	0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)
	0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)
	0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)
	0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)
	0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)
	0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)
	0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)
	0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)
	0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)
	0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)
	0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)
	0x00,(byte)0xC1,(byte)0x81,(byte)0x40,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x01,(byte)0xC0,(byte)0x80,(byte)0x41,(byte)0x00,(byte)0xC1,(byte)0x81,(byte)
	0x40
	};


	static byte tab_L[] = {
	0x00,(byte)0xC0,(byte)0xC1,(byte)0x01,(byte)0xC3,(byte)0x03,(byte)0x02,(byte)0xC2,(byte)0xC6,(byte)0x06,(byte)0x07,(byte)0xC7,(byte)0x05,(byte)0xC5,(byte)0xC4,(byte)
	0x04,(byte)0xCC,(byte)0x0C,(byte)0x0D,(byte)0xCD,(byte)0x0F,(byte)0xCF,(byte)0xCE,(byte)0x0E,(byte)0x0A,(byte)0xCA,(byte)0xCB,(byte)0x0B,(byte)0xC9,(byte)0x09,(byte)
	0x08,(byte)0xC8,(byte)0xD8,(byte)0x18,(byte)0x19,(byte)0xD9,(byte)0x1B,(byte)0xDB,(byte)0xDA,(byte)0x1A,(byte)0x1E,(byte)0xDE,(byte)0xDF,(byte)0x1F,(byte)0xDD,(byte)
	0x1D,(byte)0x1C,(byte)0xDC,(byte)0x14,(byte)0xD4,(byte)0xD5,(byte)0x15,(byte)0xD7,(byte)0x17,(byte)0x16,(byte)0xD6,(byte)0xD2,(byte)0x12,(byte)0x13,(byte)0xD3,(byte)
	0x11,(byte)0xD1,(byte)0xD0,(byte)0x10,(byte)0xF0,(byte)0x30,(byte)0x31,(byte)0xF1,(byte)0x33,(byte)0xF3,(byte)0xF2,(byte)0x32,(byte)0x36,(byte)0xF6,(byte)0xF7,(byte)
	0x37,(byte)0xF5,(byte)0x35,(byte)0x34,(byte)0xF4,(byte)0x3C,(byte)0xFC,(byte)0xFD,(byte)0x3D,(byte)0xFF,(byte)0x3F,(byte)0x3E,(byte)0xFE,(byte)0xFA,(byte)0x3A,(byte)
	0x3B,(byte)0xFB,(byte)0x39,(byte)0xF9,(byte)0xF8,(byte)0x38,(byte)0x28,(byte)0xE8,(byte)0xE9,(byte)0x29,(byte)0xEB,(byte)0x2B,(byte)0x2A,(byte)0xEA,(byte)0xEE,(byte)
	0x2E,(byte)0x2F,(byte)0xEF,(byte)0x2D,(byte)0xED,(byte)0xEC,(byte)0x2C,(byte)0xE4,(byte)0x24,(byte)0x25,(byte)0xE5,(byte)0x27,(byte)0xE7,(byte)0xE6,(byte)0x26,(byte)
	0x22,(byte)0xE2,(byte)0xE3,(byte)0x23,(byte)0xE1,(byte)0x21,(byte)0x20,(byte)0xE0,(byte)0xA0,(byte)0x60,(byte)0x61,(byte)0xA1,(byte)0x63,(byte)0xA3,(byte)0xA2,(byte)
	0x62,(byte)0x66,(byte)0xA6,(byte)0xA7,(byte)0x67,(byte)0xA5,(byte)0x65,(byte)0x64,(byte)0xA4,(byte)0x6C,(byte)0xAC,(byte)0xAD,(byte)0x6D,(byte)0xAF,(byte)0x6F,(byte)
	0x6E,(byte)0xAE,(byte)0xAA,(byte)0x6A,(byte)0x6B,(byte)0xAB,(byte)0x69,(byte)0xA9,(byte)0xA8,(byte)0x68,(byte)0x78,(byte)0xB8,(byte)0xB9,(byte)0x79,(byte)0xBB,(byte)
	0x7B,(byte)0x7A,(byte)0xBA,(byte)0xBE,(byte)0x7E,(byte)0x7F,(byte)0xBF,(byte)0x7D,(byte)0xBD,(byte)0xBC,(byte)0x7C,(byte)0xB4,(byte)0x74,(byte)0x75,(byte)0xB5,(byte)
	0x77,(byte)0xB7,(byte)0xB6,(byte)0x76,(byte)0x72,(byte)0xB2,(byte)0xB3,(byte)0x73,(byte)0xB1,(byte)0x71,(byte)0x70,(byte)0xB0,(byte)0x50,(byte)0x90,(byte)0x91,(byte)
	0x51,(byte)0x93,(byte)0x53,(byte)0x52,(byte)0x92,(byte)0x96,(byte)0x56,(byte)0x57,(byte)0x97,(byte)0x55,(byte)0x95,(byte)0x94,(byte)0x54,(byte)0x9C,(byte)0x5C,(byte)
	0x5D,(byte)0x9D,(byte)0x5F,(byte)0x9F,(byte)0x9E,(byte)0x5E,(byte)0x5A,(byte)0x9A,(byte)0x9B,(byte)0x5B,(byte)0x99,(byte)0x59,(byte)0x58,(byte)0x98,(byte)0x88,(byte)
	0x48,(byte)0x49,(byte)0x89,(byte)0x4B,(byte)0x8B,(byte)0x8A,(byte)0x4A,(byte)0x4E,(byte)0x8E,(byte)0x8F,(byte)0x4F,(byte)0x8D,(byte)0x4D,(byte)0x4C,(byte)0x8C,(byte)
	0x44,(byte)0x84,(byte)0x85,(byte)0x45,(byte)0x87,(byte)0x47,(byte)0x46,(byte)0x86,(byte)0x82,(byte)0x42,(byte)0x43,(byte)0x83,(byte)0x41,(byte)0x81,(byte)0x80,(byte)
	0x40
	};


        public static int addCRC16(int curr_crc, int new_byte) {
              byte CRC_Hi = (byte)(curr_crc >> 8);
              byte CRC_Lo = (byte)(curr_crc >> 0);

              short I = (short) ((short) (CRC_Hi ^ new_byte) & 0xff) ;
              CRC_Hi = (byte) (CRC_Lo ^ tab_H[I]);
              CRC_Lo = tab_L[I];

              return (short) (CRC_Hi << 8 | CRC_Lo & 0xff ) ;
        }

        public static short addCRC16(int curr_crc, byte[] value , int offset , int length )
        {
                short I = 0;
                byte CRC_Hi = (byte)(curr_crc >> 8);
                byte CRC_Lo = (byte)(curr_crc >> 0);

                for(int i=offset ; i< offset + length ; i++)	{
                I = (short) ((short) (CRC_Hi ^ value[i]) & 0xff) ;
                CRC_Hi = (byte) (CRC_Lo ^ tab_H[I]);
                CRC_Lo = tab_L[I];
                }

                return (short) (CRC_Hi << 8 | CRC_Lo & 0xff ) ;
        }

	public static short getCRC16( byte[] value , int offset , int length )
	{
		short I = 0;
		byte CRC_Hi = (byte) 0xff ;
		byte CRC_Lo = (byte) 0xff;

		for(int i=offset ; i< offset + length ; i++)	{
		I = (short) ((short) (CRC_Hi ^ value[i]) & 0xff) ;
		CRC_Hi = (byte) (CRC_Lo ^ tab_H[I]);
		CRC_Lo = tab_L[I];
		}

		return (short) (CRC_Hi << 8 | CRC_Lo & 0xff ) ;
	}


	/** 특정 데이터들에 대한 CRC16 값을 구한다. */
	public static short getCRC16( byte[] value)
	{
		return getCRC16( value , 0 , value.length ) ;

	}




//	/** CRC 다항식 */
//	public static short CRC16   = (short) 0x8005 ;
//
//	public static short CRCtbl[] =
//	{
//		(short )0x0000, (short )
//			0x8005, (short ) 0x800F, (short ) 0x000A, (short ) 0x801B, (short ) 0x001E, (short ) 0x0014, (short ) 0x8011, (short )
//			0x8033, (short ) 0x0036, (short ) 0x003C, (short ) 0x8039, (short ) 0x0028, (short ) 0x802D, (short ) 0x8027, (short )
//			0x0022, (short ) 0x8063, (short ) 0x0066, (short ) 0x006C, (short ) 0x8069, (short ) 0x0078, (short ) 0x807D, (short )
//			0x8077, (short ) 0x0072, (short ) 0x0050, (short ) 0x8055, (short ) 0x805F, (short ) 0x005A, (short ) 0x804B, (short )
//			0x004E, (short ) 0x0044, (short ) 0x8041, (short ) 0x80C3, (short ) 0x00C6, (short ) 0x00CC, (short ) 0x80C9, (short )
//			0x00D8, (short ) 0x80DD, (short ) 0x80D7, (short ) 0x00D2, (short ) 0x00F0, (short ) 0x80F5, (short ) 0x80FF, (short )
//			0x00FA, (short ) 0x80EB, (short ) 0x00EE, (short ) 0x00E4, (short ) 0x80E1, (short ) 0x00A0, (short ) 0x80A5, (short )
//			0x80AF, (short ) 0x00AA, (short ) 0x80BB, (short ) 0x00BE, (short ) 0x00B4, (short ) 0x80B1, (short ) 0x8093, (short )
//			0x0096, (short ) 0x009C, (short ) 0x8099, (short ) 0x0088, (short ) 0x808D, (short ) 0x8087, (short ) 0x0082, (short )
//			0x8183, (short ) 0x0186, (short ) 0x018C, (short ) 0x8189, (short ) 0x0198, (short ) 0x819D, (short ) 0x8197, (short )
//			0x0192, (short ) 0x01B0, (short ) 0x81B5, (short ) 0x81BF, (short ) 0x01BA, (short ) 0x81AB, (short ) 0x01AE, (short )
//			0x01A4, (short ) 0x81A1, (short ) 0x01E0, (short ) 0x81E5, (short ) 0x81EF, (short ) 0x01EA, (short ) 0x81FB, (short )
//			0x01FE, (short ) 0x01F4, (short ) 0x81F1, (short ) 0x81D3, (short ) 0x01D6, (short ) 0x01DC, (short ) 0x81D9, (short )
//			0x01C8, (short ) 0x81CD, (short ) 0x81C7, (short ) 0x01C2, (short ) 0x0140, (short ) 0x8145, (short ) 0x814F, (short )
//			0x014A, (short ) 0x815B, (short ) 0x015E, (short ) 0x0154, (short ) 0x8151, (short ) 0x8173, (short ) 0x0176, (short )
//			0x017C, (short ) 0x8179, (short ) 0x0168, (short ) 0x816D, (short ) 0x8167, (short ) 0x0162, (short ) 0x8123, (short )
//			0x0126, (short ) 0x012C, (short ) 0x8129, (short ) 0x0138, (short ) 0x813D, (short ) 0x8137, (short ) 0x0132, (short )
//			0x0110, (short ) 0x8115, (short ) 0x811F, (short ) 0x011A, (short ) 0x810B, (short ) 0x010E, (short ) 0x0104, (short )
//			0x8101, (short ) 0x8303, (short ) 0x0306, (short ) 0x030C, (short ) 0x8309, (short ) 0x0318, (short ) 0x831D, (short )
//			0x8317, (short ) 0x0312, (short ) 0x0330, (short ) 0x8335, (short ) 0x833F, (short ) 0x033A, (short ) 0x832B, (short )
//			0x032E, (short ) 0x0324, (short ) 0x8321, (short ) 0x0360, (short ) 0x8365, (short ) 0x836F, (short ) 0x036A, (short )
//			0x837B, (short ) 0x037E, (short ) 0x0374, (short ) 0x8371, (short ) 0x8353, (short ) 0x0356, (short ) 0x035C, (short )
//			0x8359, (short ) 0x0348, (short ) 0x834D, (short ) 0x8347, (short ) 0x0342, (short ) 0x03C0, (short ) 0x83C5, (short )
//			0x83CF, (short ) 0x03CA, (short ) 0x83DB, (short ) 0x03DE, (short ) 0x03D4, (short ) 0x83D1, (short ) 0x83F3, (short )
//			0x03F6, (short ) 0x03FC, (short ) 0x83F9, (short ) 0x03E8, (short ) 0x83ED, (short ) 0x83E7, (short ) 0x03E2, (short )
//			0x83A3, (short ) 0x03A6, (short ) 0x03AC, (short ) 0x83A9, (short ) 0x03B8, (short ) 0x83BD, (short ) 0x83B7, (short )
//			0x03B2, (short ) 0x0390, (short ) 0x8395, (short ) 0x839F, (short ) 0x039A, (short ) 0x838B, (short ) 0x038E, (short )
//			0x0384, (short ) 0x8381, (short ) 0x0280, (short ) 0x8285, (short ) 0x828F, (short ) 0x028A, (short ) 0x829B, (short )
//			0x029E, (short ) 0x0294, (short ) 0x8291, (short ) 0x82B3, (short ) 0x02B6, (short ) 0x02BC, (short ) 0x82B9, (short )
//			0x02A8, (short ) 0x82AD, (short ) 0x82A7, (short ) 0x02A2, (short ) 0x82E3, (short ) 0x02E6, (short ) 0x02EC, (short )
//			0x82E9, (short ) 0x02F8, (short ) 0x82FD, (short ) 0x82F7, (short ) 0x02F2, (short ) 0x02D0, (short ) 0x82D5, (short )
//			0x82DF, (short ) 0x02DA, (short ) 0x82CB, (short ) 0x02CE, (short ) 0x02C4, (short ) 0x82C1, (short ) 0x8243, (short )
//			0x0246, (short ) 0x024C, (short ) 0x8249, (short ) 0x0258, (short ) 0x825D, (short ) 0x8257, (short ) 0x0252, (short )
//			0x0270, (short ) 0x8275, (short ) 0x827F, (short ) 0x027A, (short ) 0x826B, (short ) 0x026E, (short ) 0x0264, (short )
//			0x8261, (short ) 0x0220, (short ) 0x8225, (short ) 0x822F, (short ) 0x022A, (short ) 0x823B, (short ) 0x023E, (short )
//			0x0234, (short ) 0x8231, (short ) 0x8213, (short ) 0x0216, (short ) 0x021C, (short ) 0x8219, (short ) 0x0208, (short )
//			0x820D, (short ) 0x8207, (short ) 0x0202
//
//
//	};
//
//
//	/** 특정 데이터들에 대한 CRC16 값을 구한다. */
//	public static short getCRC16( byte[] value , int offset , int length )
//	{
//
//		short crc = 0 ;
//
//		for( int i = offset ; i < length + offset ; i ++)
//		{
//			crc = (short) ((crc << 8) ^ CRCtbl[ ((crc >> 8) ^ value[i]) & 0xff]);
//
//		}
//		return crc;
//
//
//
//	}
//
//


}

